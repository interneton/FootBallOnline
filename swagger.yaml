openapi: 3.0.0
info:
  title: Your API
  description: API documentation for your application
  version: 1.0.0
servers:
  - url: http://localhost:3000/
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
          description: User ID
        account:
          type: string
          description: User account email
        password:
          type: string
          description: User password
        name:
          type: string
          description: User's name
        cashAmount:
          type: integer
          description: User's cash amount
        teamName:
          type: string
          description: User's team name
        score:
          type: integer
          description: User's score
    LoginRequest:
      type: object
      properties:
        account:
          type: string
          description: User account email
        password:
          type: string
          description: User password
      required:
        - account
        - password
    LoginResponse:
      type: object
      properties:
        message:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
    SignupRequest:
      type: object
      properties:
        account:
          type: string
          description: User account email
        password:
          type: string
          description: User password
        name:
          type: string
          description: User's name
        teamName:
          type: string
          description: User's team name
      required:
        - account
        - password
        - name
        - teamName
    SignupResponse:
      type: object
      properties:
        message:
          type: string
        newUser:
          $ref: '#/components/schemas/User'
    PurchaseCashRequest:
      type: object
      properties:
        amount:
          type: integer
          description: Amount of cash to purchase
      required:
        - amount
    PurchaseCashResponse:
      type: object
      properties:
        message:
          type: string
        cash:
          type: integer
    DrawPlayerRequest:
      type: object
      properties:
        packId:
          type: integer
          description: ID of the player pack
      required:
        - packId
    DrawPlayerResponse:
      type: object
      properties:
        message:
          type: string
        player:
          type: string
    MakePackRequest:
      type: object
      properties:
        packname:
          type: string
          description: Name of the player pack
        sspb:
          type: integer
          description: Probability of getting SSPB player
        apb:
          type: integer
          description: Probability of getting APB player
        bpb:
          type: integer
          description: Probability of getting BPB player
        cpb:
          type: integer
          description: Probability of getting CPB player
        fpb:
          type: integer
          description: Probability of getting FPB player
        price:
          type: integer
          description: Price of the player pack
      required:
        - packname
        - sspb
        - apb
        - bpb
        - cpb
        - fpb
        - price
    MakePackResponse:
      type: object
      properties:
        message:
          type: string
        packdata:
          type: object
          properties:
            name:
              type: string
            price:
              type: integer
            SSPB:
              type: integer
            APB:
              type: integer
            BPB:
              type: integer
            CPB:
              type: integer
            FPB:
              type: integer
    PlayGameRequest:
      type: object
      properties:
        result:
          type: string
          description: Result of the game
          enum: [win, loss, draw]
      required:
        - result
    SoccerPlayer: 
      type: object
      properties:
        soccerPlayerId:
          type: integer
          description: Soccer Player ID
        name:
          type: string
          description: Player's name
        speed:
          type: integer
          description: Speed of the player
        goalDecision:
          type: integer
          description: Goal Decision of the player
        shootPower:
          type: integer
          description: Shoot Power of the player
        defense:
          type: integer
          description: Defense of the player
        stamina:
          type: integer
          description: Stamina of the player
        rank:
          type: string
          description: Rank of the player
    AllPlayersResponse:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/SoccerPlayer'
    MyPlayersResponse:
      type: object
      properties:
        players:
          type: array
          items:
            type: object
            properties:
              soccerPlayerId:
                type: integer
                description: Soccer Player ID
              name:
                type: string
                description: Player's name
              speed:
                type: integer
                description: Speed of the player
              goalDecision:
                type: integer
                description: Goal Decision of the player
              shootPower:
                type: integer
                description: Shoot Power of the player
              defense:
                type: integer
                description: Defense of the player
              stamina:
                type: integer
                description: Stamina of the player
              rank:
                type: string
                description: Rank of the player

    EquipPlayerRequest:
        type: object
        properties:
          soccerPlayerId:
            type: integer
            description: Soccer Player ID
        required:
          - soccerPlayerId
    EquipPlayerResponse:
        type: object
        properties:
          message:
            type: string    
    RegisterPlayerRequest:
      type: object
      properties:
        name:
          type: string
          description: Player's name
        speed:
          type: integer
          description: Speed of the player
        goalDecision:
          type: integer
          description: Goal Decision of the player
        shootPower:
          type: integer
          description: Shoot Power of the player
        defense:
          type: integer
          description: Defense of the player
        stamina:
          type: integer
          description: Stamina of the player
      required:
        - name
        - speed
        - goalDecision
        - shootPower
        - defense
        - stamina
security:
  - bearerAuth: []
paths:
  /token/refresh-token:
    post:
      summary: Refresh access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token to generate new access token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '403':
          description: Refresh token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users/login:
    post:
      summary: Log in user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '500':
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /users/signup:
    post:
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Signup successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '500':
          description: Signup failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /shop/purchase:
    post:
      summary: Purchase cash
      security:
        - bearerAuth: [] # Ensure the security is defined
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseCashRequest'
      responses:
        '200':
          description: Cash purchased successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseCashResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /shop/getCashAmount:
    get:
      summary: Get current cash amount
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current cash amount retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cashAmount:
                    type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /shop/draw:
    post:
      summary: Draw a player
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrawPlayerRequest'
      responses:
        '200':
          description: Player drawn successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrawPlayerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /shop/makepack:
    post:
      summary: Create a new player pack
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakePackRequest'
      responses:
        '201':
          description: Pack created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakePackResponse'
        '400':
          description: Invalid probability
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /players/equip:
    post:
      summary: Equip a player
      description: Equip a player by their ID.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EquipPlayerRequest'
      responses:
        '200':
          description: Player equipped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipPlayerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
  /players/unequip:
    post:
      summary: Unequip a player
      description: Unequip a player by their ID.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EquipPlayerRequest'
      responses:
        '200':
          description: Player unequipped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipPlayerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
  /players/stats:
    get:
      summary: Get all player stats
      responses:
        '200':
          description: Player stats retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    speed:
                      type: integer
                    goalDecision:
                      type: integer
                    shootPower:
                      type: integer
                    defense:
                      type: integer
                    stamina:
                      type: integer
  /players/register:
    post:
      summary: Register a new player
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPlayerRequest'
      responses:
        '201':
          description: Player registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  player:
                    $ref: '#/components/schemas/Player'
        '409':
          description: Duplicate player
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /game/play:
    post:
      summary: Record match result
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayGameRequest'
      responses:
        '200':
          description: Match result recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /game/ranking:
    get:
      summary: Get user rankings
      responses:
        '200':
          description: Rankings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: integer
                    score:
                      type: integer
        '404':
          description: No ranking data found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /players/getAllPlayer:
    get:
      summary: Get all player stats
      description: Retrieve stats for all players in the database.
      responses:
        '200':
          description: All player stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPlayersResponse'
  /players/getInvenPlayer:
    get:
      summary: Get stats for logged-in user's players
      description: Retrieve stats for the players owned by the currently logged-in user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's player stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyPlayersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
