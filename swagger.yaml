openapi: 3.0.0
info:
  title: Soccer Game API
  version: '1.0.0'
  description: API documentation for the online soccer game
  contact:
    name: Support
    email: support@example.com
servers:
  - url: 'http://localhost:3000'
    description: Development server

paths:
  /users/signup:
    post:
      summary: '회원가입'
      description: '새로운 사용자 등록'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUp'
      responses:
        '201':
          description: '사용자가 성공적으로 등록되었습니다.'
        '400':
          description: '요청 본문이 유효하지 않습니다.'
  /users/{id}:
    get:
      summary: '사용자 정보 조회'
      description: '주어진 ID를 가진 사용자의 정보를 조회합니다.'
      parameters:
        - name: id
          in: path
          required: true
          description: '사용자의 고유 ID'
          schema:
            type: integer
      responses:
        '200':
          description: '사용자 정보 반환'
        '404':
          description: '사용자를 찾을 수 없음'
  
  /players/equip:
    post:
      summary: '선수 장착'
      description: '선수를 장착하여 팀에 추가합니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EquipPlayer'
      responses:
        '200':
          description: '선수 장착 성공'
        '400':
          description: '요청 본문이 유효하지 않습니다.'

  /players/unequip:
    post:
      summary: '선수 장착 해제'
      description: '팀에서 선수를 장착 해제합니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EquipPlayer'
      responses:
        '200':
          description: '선수 장착 해제 성공'
        '400':
          description: '요청 본문이 유효하지 않습니다.'

  /players/stats:
    get:
      summary: '모든 선수 능력치 조회'
      description: '등록된 모든 선수의 능력치를 조회합니다.'
      responses:
        '200':
          description: '선수 능력치 반환'

  /players/upgrade:
    post:
      summary: '선수 강화'
      description: '선수의 능력치를 강화합니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradePlayer'
      responses:
        '200':
          description: '선수 강화 성공'
        '400':
          description: '요청 본문이 유효하지 않습니다.'

  /players/register:
    post:
      summary: '선수 등록'
      description: '새로운 선수를 등록합니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPlayer'
      responses:
        '201':
          description: '선수가 성공적으로 등록되었습니다.'
        '400':
          description: '요청 본문이 유효하지 않습니다.'

  /shop/purchase:
    post:
      summary: '캐시 구매'
      description: '게임 내 캐시를 구매합니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseCash'
      responses:
        '200':
          description: '캐시 구매 성공'
        '400':
          description: '요청 본문이 유효하지 않습니다.'

  /shop/getCashAmount/{userId}:
    get:
      summary: '캐시 잔액 조회'
      description: '사용자의 현재 캐시 잔액을 조회합니다.'
      parameters:
        - name: userId
          in: path
          required: true
          description: '사용자의 고유 ID'
          schema:
            type: integer
      responses:
        '200':
          description: '캐시 잔액 반환'
        '404':
          description: '사용자를 찾을 수 없음'

  /shop/draw:
    post:
      summary: '선수 뽑기'
      description: '가챠 시스템을 통해 선수를 뽑습니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrawPlayer'
      responses:
        '200':
          description: '선수 뽑기 성공'
        '400':
          description: '요청 본문이 유효하지 않습니다.'

  /game/play:
    post:
      summary: '게임 플레이'
      description: '게임을 플레이하고 결과를 기록합니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayGame'
      responses:
        '200':
          description: '게임 플레이 성공'
        '400':
          description: '요청 본문이 유효하지 않습니다.'
        '401':
          description: '인증 실패'

  /game/ranking:
    get:
      summary: '유저 랭킹 조회'
      description: '게임 내 유저 랭킹을 조회합니다.'
      responses:
        '200':
          description: '유저 랭킹 리스트 반환'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: 'user123'
                    points:
                      type: integer
                      example: 1500
        '401':
          description: '인증 실패'

components:
  schemas:
    UserSignUp:
      type: object
      properties:
        account:
          type: string
          example: 'user@example.com'
        password:
          type: string
          example: 'password123'
        name:
          type: string
          example: 'John Doe'
        teamName:
          type: string
          example: 'Dream Team'
      required:
        - account
        - password
        - name
        - teamName

    EquipPlayer:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        soccerPlayerId:
          type: integer
          example: 100
      required:
        - userId
        - soccerPlayerId

    PurchaseCash:
      type: object
      properties:
        amount:
          type: number
          example: 1000
      required:
        - amount

    DrawPlayer:
      type: object
      properties:
        userId:
          type: integer
          example: 1
      required:
        - userId

    UpgradePlayer:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        playerId:
          type: integer
          example: 101
        level:
          type: integer
          example: 2
      required:
        - userId
        - playerId
        - level

    PlayGame:
      type: object
      properties:
        userId:
          type: integer
          example: 1
      required:
        - userId

    RegisterPlayer:
      type: object
      properties:
        name:
          type: string
          example: 'Lionel Messi'
        speed:
          type: integer
          example: 85
        goalDecision:
          type: integer
          example: 92
        shootPower:
          type: integer
          example: 88
        defense:
          type: integer
          example: 45
        stamina:
          type: integer
          example: 80
      required:
        - name
        - speed
        - goalDecision
        - shootPower
        - defense
        - stamina
